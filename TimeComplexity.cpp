/*
‚úÖ Understanding the 10‚Å∑ / 10‚Å∏ Time Complexity Benchmark
In competitive programming or coding interviews, a common rule of thumb is:

‚úÖ Your solution should run within 1 second.
In 1 second, a modern processor can handle about 10‚Å∑ to 10‚Å∏ operations.

This is why when analyzing the time complexity of your algorithm, you‚Äôll often see the goal is to make it efficient enough to run under this limit.

üìå Why 10‚Å∑ or 10‚Å∏ operations per second?
It‚Äôs based on:

Average processing speed of online judge platforms (e.g., Leetcode, Codeforces, etc.)

CPU cycles: Each operation (comparison, addition, loop iteration) can take several CPU cycles.

Online judges set time limits usually at 1 or 2 seconds per test case.

So you can assume:

Time	Maximum allowed operations
1 sec	~10‚Å∑ ‚Äì 10‚Å∏
2 sec	~2√ó10‚Å∑ ‚Äì 2√ó10‚Å∏

üìä Example of Time Complexities That Fit
Let‚Äôs say the input size is:

n = 10‚Åµ ‚Üí OK for O(n log n) or O(n)

n = 10‚Å∂ ‚Üí OK for O(n) or O(n log n) with careful coding

n = 10‚Åπ ‚Üí Must be O(1) or very optimized math/logic

üí° How to Use This Rule
Input Size	Acceptable Time Complexity
n ‚â§ 10¬≥	O(n¬≤), O(n log n), O(n) fine
n ‚â§ 10‚Åµ	O(n log n), O(n) ‚úÖ
n ‚â§ 10‚Å∂	O(n), ideally no nested loops
n > 10‚Å∂	O(log n) or O(1) only

So if you see constraints like 1 ‚â§ n ‚â§ 10‚Åµ, your algorithm should be O(n log n) or better.
*/
